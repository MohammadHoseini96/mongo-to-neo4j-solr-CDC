{
  "name": "neo4jSinkConnector",
  "config": {
    "connector.class": "streams.kafka.connect.sink.Neo4jSinkConnector",
    "kafka.bootstrap.servers": "broker:9092",
    "topics": "test.movies, test.relations, test.properties, test.objects",
    "key.converter": "org.apache.kafka.connect.json.JsonConverter",
    "key.converter.schemas.enable": "false",
    "value.converter": "org.apache.kafka.connect.json.JsonConverter",
    "value.converter.schemas.enable": "false",
    "errors.retry.timeout": "-1",
    "errors.retry.delay.max.ms": "1000",
    "errors.tolerance": "all",
    "errors.log.enable": true,
    "errors.deadletterqueue.topic.name": "test-error-topic",
    "errors.log.include.messages": true,
    "errors.deadletterqueue.topic.replication.factor": 1,
    "neo4j.server.uri": "bolt://neo4j:7687",
    "neo4j.authentication.basic.username": "neo4j",
    "neo4j.authentication.basic.password": "connect",
    "neo4j.encryption.enabled": false,
    "neo4j.topic.cypher.test.movies": "WITH event[\"payload\"] AS payload WITH apoc.convert.fromJsonMap(payload) AS pl CALL { WITH pl WITH pl WHERE pl[\"operationType\"] = \"insert\" WITH pl[\"fullDocument\"] AS doc, pl[\"documentKey\"][\"_id\"] AS _id MERGE (m:Movie{mongoId: _id}) SET m.rate=doc[\"rate\"], m.duration=doc[\"duration\"], m.title=doc[\"title\"] MERGE (p:Person{name:doc[\"director\"]}) MERGE (y:Year{year:coalesce(toInteger(doc[\"year\"]),-1)}) MERGE (m)<-[:DIRECTED]-(p) MERGE (m)-[:RELEASED_IN]->(y) WITH doc, m, coalesce(doc[\"genre\"],[]) as genres UNWIND genres as genre MERGE (g:Genre{name:genre}) MERGE (m)-[:HAS_GENRE]->(g) RETURN 1 UNION WITH pl WITH pl WHERE pl[\"operationType\"] = \"delete\" WITH pl[\"documentKey\"][\"_id\"] AS _id MATCH (m:Movie{mongoId:_id}) DETACH DELETE m RETURN 1 UNION WITH pl WITH pl WHERE pl[\"operationType\"] = \"update\" WITH pl[\"updateDescription\"][\"updatedFields\"] as updates, pl[\"documentKey\"][\"_id\"] AS _id MATCH (m:Movie{mongoId:_id}) WITH m, updates CALL { WITH m, updates WITH m, updates UNWIND keys(updates) as updatedField CALL apoc.create.setProperty(m, updatedField, updates[updatedField]) YIELD node RETURN 1} RETURN 1 } RETURN 1",
    "neo4j.topic.cypher.test.relations": "WITH event[\"payload\"] AS payload WITH apoc.convert.fromJsonMap(payload) AS pl CALL { WITH pl WITH pl WHERE pl[\"operationType\"] = \"insert\" WITH pl[\"fullDocument\"] AS doc, pl[\"documentKey\"][\"_id\"] AS _id MERGE (r:Relation{mongoId: _id}) SET r.name=doc[\"name\"], r.description=doc[\"description\"] RETURN 1 UNION WITH pl WITH pl WHERE pl[\"operationType\"] = \"delete\" WITH pl[\"documentKey\"][\"_id\"] AS _id MATCH (r:Relation{mongoId:_id}) DETACH DELETE r RETURN 1 } return 1",
    "neo4j.topic.cypher.test.properties": "WITH event[\"payload\"] AS payload WITH apoc.convert.fromJsonMap(payload) AS pl CALL { WITH pl WITH pl WHERE pl[\"operationType\"] = \"insert\" WITH pl[\"fullDocument\"] AS doc, pl[\"documentKey\"][\"_id\"] AS _id MERGE (p:Property{mongoId: _id}) SET p.name=doc[\"name\"], p.description=doc[\"description\"] RETURN 1 UNION WITH pl WITH pl WHERE pl[\"operationType\"] = \"delete\" WITH pl[\"documentKey\"][\"_id\"] AS _id MATCH (p:Property{mongoId:_id}) DETACH DELETE p RETURN 1 } return 1",
    "neo4j.topic.cypher.test.objects": "WITH event[\"payload\"] AS payload WITH apoc.convert.fromJsonMap(payload) AS pl CALL { WITH pl WITH pl WHERE pl[\"operationType\"] = \"insert\" WITH pl[\"fullDocument\"] AS doc, pl[\"documentKey\"][\"_id\"] AS _id MERGE (o:Object{mongoId: _id}) SET o.name=doc[\"name\"], o.description=doc[\"description\"] WITH doc, o, coalesce(doc[\"properties\"],[]) as properties UNWIND properties as property MERGE (p:Property{mongoId:property[\"propertyId\"]}) MERGE (o)-[:HAS_PROPERTY{quntity: coalesce(property[\"quntity\"],\"unknown\")}]->(p) WITH doc, o, coalesce(doc[\"relations\"],[]) as relations UNWIND relations as relation MERGE (r:Relation{mongoId:relation[\"relationId\"]}) MERGE (ro:Object{mongoId: relation[\"relationedObjectId\"]}) MERGE (o)-[:HAS_RELATION{quality: coalesce(relation[\"quality\"], \"unknown\")}]->(r)-[:IS_RELATED_TO]->(ro) RETURN 1 UNION WITH pl WITH pl WHERE pl[\"operationType\"] = \"delete\" WITH pl[\"documentKey\"][\"_id\"] AS _id MATCH (o:Object{mongoId:_id}) DETACH DELETE o RETURN 1 } return 1"
  }
}